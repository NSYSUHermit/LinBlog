data1$Playoff <- data$Playoff
data1$Champion <- data$Champion
data1$BA <- data$BA
data1$ERA <- data$ERA
data1$BatAge <- data$BatAge
data1$PAge <- data$PAge
data <- read.csv("C:\\Users\\User\\OneDrive - student.nsysu.edu.tw\\Educations\\2019暑期實習\\工研院\\資料科學_mlb\\mlb.csv")
row.names(data) <- data$Tm
data <- data[,-c(1,33,34,65)]
data$Playoff <- as.factor(data$Playoff)
data_lm <- data[,-c(62,63)]
attach(data)
library(tidyverse)
library(ggcorrplot)
#W,L
ggplot(data = data,mapping = aes(x = W.L.,color = Playoff))+
geom_freqpoly(binwidth = 0.1)
#correlation
data1 = as.data.frame(W.L.)
data1$Playoff <- data$Playoff
data1$Champion <- data$Champion
data1$BA <- data$BA
data1$ERA <- data$ERA
data1$BatAge <- data$BatAge
data1$PAge <- data$PAge
#fit full model
fit_lm <- lm(W.L.~.,data = data_lm)
summary(fit_lm)
library(car)
vif(fit_bestlm, digits = 3)
vif_func<-function(in_frame,thresh=10,trace=T,...){
library(fmsb)
if(any(!'data.frame' %in% class(in_frame))) in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- names(in_frame)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame, ...))))
}
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
if(vif_max < thresh){
if(trace==T){ #print output of each iteration
prmatrix(vif_init,collab=c('var','vif'),rowlab=rep('',nrow(vif_init)),quote=F)
cat('\n')
cat(paste('All variables have VIF < ', thresh,', max VIF ',round(vif_max,2), sep=''),'\n\n')
}
return(var_names)
}
else{
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
while(vif_max >= thresh){
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat, ...))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) break
if(trace==T){ #print output of each iteration
prmatrix(vif_vals,collab=c('var','vif'),rowlab=rep('',nrow(vif_vals)),quote=F)
cat('\n')
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
flush.console()
}
in_dat<-in_dat[,!names(in_dat) %in% vif_vals[max_row,1]]
}
return(names(in_dat))
}
}
library(car)
vif(fit_bestlm, digits = 3)
require(MASS)
require(clusterGeneration)
vif_func(in_frame=data_lm[,-32],thresh=5,trace=T)
library(leaps)
regfit.best<-regsubsets(W.L.~X.Bat+BatAge+AB+X2B+X3B+HR_x+SB+CS+BB_x+SO_x+OPS.+GDP+HBP_x+SH+SF+IBB_x+X.P+PAge+CG+tSho+cSho+SV+IP+IBB_y+HBP_y+BK+WP+ERA.+HR9+BB9+SO9+LOB_y,data_lm,nvmax=15)
regsumm<-summary(regfit.best)
which.min(regsumm$cp)
which.max(regsumm$rsq)
which.max(regsumm$adjr2)
par(mfrow = c(2,2))
plot(regsumm$cp)
points(which.min(regsumm$cp), regsumm$cp[which.min(regsumm$cp)], col = "red", cex = 2, pch = 20)
plot(regsumm$rsq)
points(which.max(regsumm$rsq), regsumm$rsq[which.max(regsumm$rsq)], col = "red", cex = 2, pch = 20)
plot(regsumm$adjr2)
points(which.max(regsumm$adjr2), regsumm$adjr2[which.max(regsumm$adjr2)], col = "red", cex = 2, pch = 20)
coef(regfit.full,15)
library(leaps)
regfit.best<-regsubsets(W.L.~X.Bat+BatAge+AB+X2B+X3B+HR_x+SB+CS+BB_x+SO_x+OPS.+GDP+HBP_x+SH+SF+IBB_x+X.P+PAge+CG+tSho+cSho+SV+IP+IBB_y+HBP_y+BK+WP+ERA.+HR9+BB9+SO9+LOB_y,data_lm,nvmax=15)
regsumm<-summary(regfit.best)
which.min(regsumm$cp)
which.max(regsumm$rsq)
which.max(regsumm$adjr2)
par(mfrow = c(2,2))
plot(regsumm$cp)
points(which.min(regsumm$cp), regsumm$cp[which.min(regsumm$cp)], col = "red", cex = 2, pch = 20)
plot(regsumm$rsq)
points(which.max(regsumm$rsq), regsumm$rsq[which.max(regsumm$rsq)], col = "red", cex = 2, pch = 20)
plot(regsumm$adjr2)
points(which.max(regsumm$adjr2), regsumm$adjr2[which.max(regsumm$adjr2)], col = "red", cex = 2, pch = 20)
fit_bestlm <- lm(W.L.~X.Bat + AB + HR_x + SO_x + OPS. + GDP + IBB_x + X.P + PAge +  tSho + SV+ IP+HBP_y+WP+ERA.,data_lm)
summary(fit_bestlm)
library(car)
vif(fit_bestlm, digits = 3)
par(mfrow = c(2,2))
plot(fit_bestlm)
blogdown:::insert_image_addin()
attach(data)
library(tidyverse)
library(ggcorrplot)
#W,L
ggplot(data = data,mapping = aes(x = W.L.,color = Playoff))+
geom_freqpoly(binwidth = 0.1)
#correlation
data1 = as.data.frame(W.L.)
data1$Playoff <- data$Playoff
data1$Champion <- data$Champion
data1$BA <- data$BA
data1$ERA <- data$ERA
data1$BatAge <- data$BatAge
data1$PAge <- data$PAge
corr <- round(cor(data1), 1)
View(data1)
str(data1)
attach(data)
library(tidyverse)
library(ggcorrplot)
#W,L
ggplot(data = data,mapping = aes(x = W.L.,color = Playoff))+
geom_freqpoly(binwidth = 0.1)
#correlation
data1 = as.data.frame(W.L.)
data1$Playoff <- as.numeric(data$Playoff)
data1$Champion <- data$Champion
data1$BA <- data$BA
data1$ERA <- data$ERA
data1$BatAge <- data$BatAge
data1$PAge <- data$PAge
corr <- round(cor(data1), 1)
ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE)
attach(data)
library(tidyverse)
library(ggcorrplot)
#W,L
ggplot(data = data,mapping = aes(x = W.L.,color = Playoff))+
geom_freqpoly(binwidth = 0.1)
#correlation
data1 = as.data.frame(W.L.)
data1$Playoff <- as.numeric(data$Playoff)
data1$Champion <- data$Champion
data1$BA <- data$BA
data1$ERA <- data$ERA
data1$BatAge <- data$BatAge
data1$PAge <- data$PAge
corr <- round(cor(data1), 1)
ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE)
library(tidyverse)
library(ggcorrplot)
#W,L
ggplot(data = data,mapping = aes(x = W.L.,color = Playoff))+
geom_freqpoly(binwidth = 0.1)
#correlation
data1 = as.data.frame(W.L.)
data1$Playoff <- as.numeric(data$Playoff)
data1$Champion <- data$Champion
data1$BA <- data$BA
data1$ERA <- data$ERA
data1$BatAge <- data$BatAge
data1$PAge <- data$PAge
corr <- round(cor(data1), 1)
ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE)
library(tidyverse)
library(ggcorrplot)
#W,L
ggplot(data = data,mapping = aes(x = W.L.,color = Playoff))+
geom_freqpoly(binwidth = 0.1)
#correlation
data1 = as.data.frame(W.L.)
data1$Playoff <- as.numeric(data$Playoff)
data1$Champion <- data$Champion
data1$BA <- data$BA
data1$ERA <- data$ERA
data1$BatAge <- data$BatAge
data1$PAge <- data$PAge
corr <- round(cor(data1), 1)
ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
## 讀取資料
這次僅使用測試資料做validation
## 建立初始化神經網路
引入models以及layers，並設定Activation Function使用Rectified Linear Unit
blogdown:::serve_site()
blogdown:::new_post_addin()
library(shiny)
runExample("01_hello")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
●Cost-sensitive Classification：將一般機器學習的損失函數 (loss function) 改為成本導向的損失函數。舉個常見的AdaCost演算法，先回憶Adaboost演算法是通過反覆迭代，每一輪迭代學習到一個分類器，並根據當前分類器的表現更新樣本的權重其更新策略為正確分類樣本權重降低，錯誤分類樣本權重加大，最終的模型是多次迭代模型的一個加權線性組合，分類越準確的分類器將會獲得越大的權重。
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
![](/post/2019-10-02-one-class-learning_files/3.GIF)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
![](/post/2019-11-14-gan-with-one-class-learning_files/1.jpg)
我們將想要生成的某類資料匯入後，先建構一個一元分類器，並將所有資料點都包含於正常資料。接著將原資料匯入GAN當中，經過幾次迭代後，我們將GAN產生的偽資料匯入當初建立好的一元分類器當中，並檢查是否所有的偽資料皆能不被辨識為異常點，若是確認這批資料皆為正常點後(也就是成功欺騙一元分類器)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
結果上來看，以GAN平衡的結果較好，但仍存在一些問題。
第一：隨機森林參數並無調整，因此在這個差距上來看並不能說平衡後的模型較佳；
第二：在未平衡前資料分類就可達到相當水準，因此可見此份資料的分類並不需要平衡資料來達成
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
---
title: GAN Sampling Versus Other Sampling Method On Credit Card Fraud Detection Data
author: Hermit
date: '2019-11-19'
slug: gan-sampling-versus-other-sampling-method-on-credit-card-fraud-detection-data
categories:
- gan
- machine-learning
- deep-learning
- Python
tags:
- classification
- neural network
---
This time I will use a imbalanced data from kaggle(link:https://www.kaggle.com/mlg-ulb/creditcardfraud/version/1).
![](/post/2019-11-19-gan-sampling-versus-other-sampling-method-on-credit-card-fraud-detection-data_files/1.jpg)
The datasets contains transactions made by credit cards in September 2013 by european cardholders. These transactions are a subset of all online transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, where the positive class (frauds) account for 0.172% of all transactions. It contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.
# Data Visualization
result <- data.frame(
x = letters[1:6],
y = rnorm(6),
z = runif(6) > 0.5
)
View(result)
result <- data.frame(
Non_Sampling = array[,],
Under_Sampling = array[,],
SMOTE = array[0.999557596696722,0.9003572630796582],
ADASYN = array[0.999557596696722,0.9003572630796582],
GAN = array[0.999557596696722,0.9003572630796582]
)
result <- data.frame(
Non_Sampling = array[0.9994803480263759,0.8678545237199384],
Under_Sampling = array[0.9995084373222475,0.8901876266312907],
SMOTE = array[0.9994663033784401,0.9023405417267101],
ADASYN = array[0.9993890578147933,0.8982438459344533],
GAN = array[0.999557596696722,0.9003572630796582]
)
result <- data.frame(
Non_Sampling = list[0.9994803480263759,0.8678545237199384],
Under_Sampling = list[0.9995084373222475,0.8901876266312907],
SMOTE = list[0.9994663033784401,0.9023405417267101],
ADASYN = list[0.9993890578147933,0.8982438459344533],
GAN = list[0.999557596696722,0.9003572630796582]
)
result <- data.frame(
Non_Sampling = list(0.9994803480263759,0.8678545237199384),
Under_Sampling = list(0.9995084373222475,0.8901876266312907),
SMOTE = list(0.9994663033784401,0.9023405417267101),
ADASYN = list(0.9993890578147933,0.8982438459344533),
GAN = list(0.999557596696722,0.9003572630796582)
)
View(result)
View(result)
result <- data.frame(
Non_Sampling = array(0.9994803480263759,0.8678545237199384),
Under_Sampling = array(0.9995084373222475,0.8901876266312907),
SMOTE = array(0.9994663033784401,0.9023405417267101),
ADASYN = array(0.9993890578147933,0.8982438459344533),
GAN = array(0.999557596696722,0.9003572630796582)
)
View(result)
GAN = array(0.999557596696722,0.9003572630796582)
GAN = vector(0.999557596696722,0.9003572630796582)
GAN = dataframe(0.999557596696722,0.9003572630796582)
GAN = data.frame(0.999557596696722,0.9003572630796582)
View(GAN)
result <- data.frame(
Non_Sampling = data.frame(0.9994803480263759,0.8678545237199384),
Under_Sampling = data.frame(0.9995084373222475,0.8901876266312907),
SMOTE = data.frame(0.9994663033784401,0.9023405417267101),
ADASYN = data.frame(0.9993890578147933,0.8982438459344533),
GAN = data.frame(0.999557596696722,0.9003572630796582)
)
View(result)
View(GAN)
View(result)
View(GAN)
result <- data.frame()
result$
View(GAN)
View(result)
result$Non_Sampling = data.frame(0.9994803480263759,0.8678545237199384)
result$Non_Sampling = vector(0.9994803480263759,0.8678545237199384)
result$Non_Sampling = float(0.9994803480263759,0.8678545237199384)
result$Non_Sampling = double(0.9994803480263759,0.8678545237199384)
result$Non_Sampling = [0.9994803480263759,0.8678545237199384]
result$Non_Sampling = c(0.9994803480263759,0.8678545237199384)
result$Non_Sampling = vector(c(0.9994803480263759,0.8678545237199384))
result$Non_Sampling = data.frame(c(0.9994803480263759,0.8678545237199384))
result = data.frame(c(0.9994803480263759,0.8678545237199384))
View(result)
result$Under_Sampling = data.frame(c(0.9995084373222475,0.8901876266312907))
View(result)
View(result)
result$SMOTE = data.frame(0.9994663033784401,0.9023405417267101)
result$ADASYN = data.frame(c(0.9993890578147933,0.8982438459344533))
result$GAN = data.frame(c(0.999557596696722,0.9003572630796582))
View(result)
result <- data.frame()
result <- data.frame()
result = data.frame(c(0.9994803480263759,0.8678545237199384))
result$Under_Sampling = data.frame(c(0.9995084373222475,0.8901876266312907))
result$SMOTE = data.frame(c(0.9994663033784401,0.9023405417267101))
result$ADASYN = data.frame(c(0.9993890578147933,0.8982438459344533))
result$GAN = data.frame(c(0.999557596696722,0.9003572630796582))
View(result)
colnames(result) <- c("Non Sampling","Under Sampling","SMOTE","ADASYN","GAN")
View(result)
colnames(result)
result <- data.frame()
colnames(result) <- c("Non Sampling","Under Sampling","SMOTE","ADASYN","GAN")
result <- data.frame()
result = data.frame(c(0.9994803480263759,0.8678545237199384))
result$Under_Sampling = data.frame(c(0.9995084373222475,0.8901876266312907))
result$SMOTE = data.frame(c(0.9994663033784401,0.9023405417267101))
result$ADASYN = data.frame(c(0.9993890578147933,0.8982438459344533))
result$GAN = data.frame(c(0.999557596696722,0.9003572630796582))
colnames(result) <- c("Non Sampling","Under Sampling","SMOTE","ADASYN","GAN")
View(result)
result <- data.frame()
result = data.frame(c(0.9994803480263759,0.8678545237199384))
result$Under_Sampling = data.frame(c(0.9995084373222475,0.8901876266312907))
result$SMOTE = data.frame(c(0.9994663033784401,0.9023405417267101))
result$ADASYN = data.frame(c(0.9993890578147933,0.8982438459344533))
result$GAN = data.frame(c(0.999557596696722,0.9003572630796582))
colnames(result) <- c("Non Sampling","Under Sampling","SMOTE","ADASYN","GAN")
rownames(result) <- c("ACC","AUC")
View(result)
result <- data.frame()
result = data.frame(c(0.9994803480263759,0.8678545237199384))
result$Under_Sampling = data.frame(c(0.9995084373222475,0.8901876266312907))
result$SMOTE = data.frame(c(0.9994663033784401,0.9023405417267101))
result$ADASYN = data.frame(c(0.9993890578147933,0.8982438459344533))
result$GAN = data.frame(c(0.999557596696722,0.9003572630796582))
result$index <- c("ACC","AUC")
colnames(result) <- c("Non Sampling","Under Sampling","SMOTE","ADASYN","GAN")
rownames(result) <- c("ACC","AUC")
View(result)
result <- data.frame()
result = data.frame(c(0.9994803480263759,0.8678545237199384))
result$Under_Sampling = data.frame(c(0.9995084373222475,0.8901876266312907))
result$SMOTE = data.frame(c(0.9994663033784401,0.9023405417267101))
result$ADASYN = data.frame(c(0.9993890578147933,0.8982438459344533))
result$GAN = data.frame(c(0.999557596696722,0.9003572630796582))
result$index <- c("ACC","AUC")
colnames(result) <- c("Non Sampling","Under Sampling","SMOTE","ADASYN","GAN","index")
rownames(result) <- c("ACC","AUC")
View(result)
library(tideverse)
library(tidyverse)
ggplot(data = result,mapping = aes(x = index))
result  = data.frame(t(result))
View(result)
result <- data.frame()
result = data.frame(c(0.9994803480263759,0.8678545237199384))
result$Under_Sampling = data.frame(c(0.9995084373222475,0.8901876266312907))
result$SMOTE = data.frame(c(0.9994663033784401,0.9023405417267101))
result$ADASYN = data.frame(c(0.9993890578147933,0.8982438459344533))
result$GAN = data.frame(c(0.999557596696722,0.9003572630796582))
colnames(result) <- c("Non Sampling","Under Sampling","SMOTE","ADASYN","GAN","index")
result <- data.frame()
result = data.frame(c(0.9994803480263759,0.8678545237199384))
result$Under_Sampling = data.frame(c(0.9995084373222475,0.8901876266312907))
result$SMOTE = data.frame(c(0.9994663033784401,0.9023405417267101))
result$ADASYN = data.frame(c(0.9993890578147933,0.8982438459344533))
result$GAN = data.frame(c(0.999557596696722,0.9003572630796582))
colnames(result) <- c("Non Sampling","Under Sampling","SMOTE","ADASYN","GAN")
rownames(result) <- c("ACC","AUC")
#result$index <- c("ACC","AUC")
result  = data.frame(t(result))
View(result)
View(result)
ggplot(data = result,mapping = aes(x = ACC)
ggplot(data = result,mapping = aes(x = ACC))
ggplot(data = result,mapping = aes(x = ACC))+
geom_freqploy(binwidth = 0.1)
library(ggplot2)
ggplot(data = result,mapping = aes(x = ACC))+
geom_freqploy(binwidth = 0.1)
library(ggplot2)
ggplot(data = result,mapping = aes(x = ACC))+
geom_freqpoly(binwidth = 0.1)
library(ggplot2)
ggplot(data = result,mapping = aes(x = ACC))+
geom_freqpoly()
library(ggplot2)
ggplot(data = result,mapping = aes(x = ACC,y = AUC))+
geom_freqpoly()
library(ggplot2)
ggplot(data = result)+
geom_fpoint(mapping = aes(x = ACC,y = AUC))
library(ggplot2)
ggplot(data = result)+
geom_point(mapping = aes(x = ACC,y = AUC))
ggplot(data = result)+
geom_point(mapping = aes(x = ACC,y = AUC,color = rownames))
ggplot(data = result)+
geom_point(mapping = aes(x = ACC,y = AUC,color = rownames(result)))
ggplot(data = result)+
geom_point(mapping = aes(x = ACC,y = AUC,color = rownames(result),shape=17))
library(ggplot2)
ggplot(data = result)+
geom_point(mapping = aes(x = ACC,y = AUC,color = rownames(result)),shape=17)
library(ggplot2)
ggplot(data = result)+
geom_point(mapping = aes(x = ACC,y = AUC,color = rownames(result)),size=17)
library(ggplot2)
ggplot(data = result)+
geom_point(mapping = aes(x = ACC,y = AUC,color = rownames(result)),size=7)
result <- data.frame()
result = data.frame(c(0.9994803480263759,0.8678545237199384))
result$Under_Sampling = data.frame(c(0.9995084373222475,0.8901876266312907))
result$SMOTE = data.frame(c(0.9994663033784401,0.9023405417267101))
result$ADASYN = data.frame(c(0.9993890578147933,0.8982438459344533))
result$GAN = data.frame(c(0.999557596696722,0.9003572630796582))
colnames(result) <- c("Non Sampling","Under Sampling","SMOTE","ADASYN","GAN")
rownames(result) <- c("ACC","AUC")
#result$index <- c("ACC","AUC")
result  = data.frame(t(result))
result
library(ggplot2)
ggplot(data = result)+
geom_point(mapping = aes(x = ACC,y = AUC,color = rownames(result)),size=7)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
![](/post/2019-11-25-gan-based-small-sample-augmentation_files/1.jfif)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
